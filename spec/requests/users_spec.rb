# require 'rails_helper'

# # This spec was generated by rspec-rails when you ran the scaffold generator.
# # It demonstrates how one might use RSpec to test the controller code that
# # was generated by Rails when you ran the scaffold generator.
# #
# # It assumes that the implementation code is generated by the rails scaffold
# # generator. If you are using any extension libraries to generate different
# # controller code, this generated spec may or may not pass.
# #
# # It only uses APIs available in rails and/or rspec-rails. There are a number
# # of tools you can use to make these specs even more expressive, but we're
# # sticking to rails and rspec-rails APIs to keep things simple and stable.

# RSpec.describe "/users", type: :request do

#   # This should return the minimal set of attributes required to create a valid
#   # User. As you add validations to User, be sure to
#   # adjust the attributes here as well.
#   let(:valid_attributes) do
#   {
#     email: 'newuser@example.com', # Use a unique email for each test
#     password: 'password',
#     password_confirmation: 'password',
#     full_name: 'New User'
#   }
#   end

#   let(:invalid_attributes) do
#   {
#     email: '',
#     password: 'short',
#     password_confirmation: 'mismatch',
#     full_name: ''
#   }
#   end

#   # Test suite for creating a new User
#   describe "POST /create" do
#     context "with valid parameters" do
#       it "creates a new User" do
#         expect {
#           post users_url, params: { user: valid_attributes }
#         }.to change(User, :count).by(1)
#       end

#       it "redirects to the created user" do # This might need adjustment depending on your Devise setup
#         post users_url, params: { user: valid_attributes }
#         expect(response).to redirect_to(user_url(User.last))
#       end
#     end

#     context "with invalid parameters" do
#       it "does not create a new User" do
#         expect do
#           post users_url, params: { user: invalid_attributes }
#         end.to change(User, :count).by(0)
#       end

#       it "renders a response with 422 status (i.e. to display the 'new' template)" do
#         post users_url, params: { user: invalid_attributes }
#         expect(response).to have_http_status(:unprocessable_entity)
#       end
#     end
#   end

#   let(:test_user) { User.create!(email: 'ray@test.com', password: 'password', full_name: 'Ray Test') }

#   describe "GET /index" do
#     it "renders a successful response" do
#       User.create! valid_attributes
#       get users_url
#       expect(response).to be_successful
#     end
#   end

#   describe "GET /show" do
#     it "renders a successful response" do
#       user = User.create! valid_attributes
#       get user_url(user)
#       expect(response).to be_successful
#     end
#   end

#   describe "GET /new" do
#     it "renders a successful response" do
#       get new_user_url
#       expect(response).to be_successful
#     end
#   end

#   describe "GET /edit" do
#     it "renders a successful response" do
#       user = User.create! valid_attributes
#       get edit_user_url(user)
#       expect(response).to be_successful
#     end
#   end

#   describe "POST /create" do
#     context "with valid parameters" do
#       it "creates a new User" do
#         expect {
#           post users_url, params: { user: valid_attributes }
#         }.to change(User, :count).by(1)
#       end

#       it "redirects to the created user" do
#         post users_url, params: { user: valid_attributes }
#         expect(response).to redirect_to(user_url(User.last))
#       end
#     end

#     context "with invalid parameters" do
#       it "does not create a new User" do
#         expect {
#           post users_url, params: { user: invalid_attributes }
#         }.to change(User, :count).by(0)
#       end

#       it "renders a response with 422 status (i.e. to display the 'new' template)" do
#         post users_url, params: { user: invalid_attributes }
#         expect(response).to have_http_status(:unprocessable_entity)
#       end
#     end
#   end

#   describe "PATCH /update" do
#     context "with valid parameters" do
#       let(:new_attributes) do
#       {
#         full_name: 'Updated Name'
#       }
#       end

#       it "updates the requested user" do
#         user = User.create! valid_attributes
#         patch user_url(user), params: { user: new_attributes }
#         user.reload
#         skip("Add assertions for updated state")
#       end

#       it "redirects to the user" do
#         sign_in test_user
#         patch user_url(test_user), params: { user: new_attributes }
#         test_user.reload
#         expect(response).to redirect_to(user_url(test_user))
#       end
#     end

#     context "with invalid parameters" do
#       it "renders a response with 422 status (i.e. to display the 'edit' template)" do
#         sign_in test_user
#         patch user_url(test_user), params: { user: invalid_attributes }
#         expect(response).to have_http_status(:unprocessable_entity)
#       end
#     end
#   end

#   describe "DELETE /destroy" do
#     it "destroys the requested user" do
#       sign_in test_user # Sign in to allow deletion
#       expect {
#         delete user_url(test_user)
#       }.to change(User, :count).by(-1)
#     end

#     it "redirects to the users list" do
#       ign_in test_user
#       delete user_url(test_user)
#       expect(response).to redirect_to(users_url)
#     end
#   end

#   # Add tests for sign-in functionality
#   describe "POST /sign_in" do # Assuming your Devise sign-in route is /users/sign_in
#     context "with valid credentials" do
#       it "signs in the user" do
#         test_user # Access the test_user to force its creation

#         post user_session_path, params: { user: { email: test_user.email, password: 'password' } }
#         expect(response).to redirect_to(root_path) # Or wherever Devise redirects after successful sign-in
#       end
#     end

#     context "with invalid credentials" do
#       it "does not sign in the user" do
#         post user_session_path, params: { user: { email: 'wrong@example.com', password: 'wrongpassword' } }
#         expect(response).to render_template(:new) # Or the appropriate Devise sign-in template
#       end
#     end
#   end
# end
