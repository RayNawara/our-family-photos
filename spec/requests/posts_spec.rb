# require 'rails_helper'

# # This spec was generated by rspec-rails when you ran the scaffold generator.
# # It demonstrates how one might use RSpec to test the controller code that
# # was generated by Rails when you ran the scaffold generator.
# #
# # It assumes that the implementation code is generated by the rails scaffold
# # generator. If you are using any extension libraries to generate different
# # controller code, this generated spec may or may not pass.
# #
# # It only uses APIs available in rails and/or rspec-rails. There are a number
# # of tools you can use to make these specs even more expressive, but we're
# # sticking to rails and rspec-rails APIs to keep things simple and stable.

# RSpec.describe "/posts", type: :request do

#   # This should return the minimal set of attributes required to create a valid
#   # Post. As you add validations to Post, be sure to
#   # adjust the attributes here as well.
#   let(:valid_attributes) {
#     {
#       caption: "My first post with an image",
#       # longitude: 40.7128,
#       # latitude: -74.0060,
#       # allow_comments: true,
#       # show_likes_count: true,
#       images: Rack::Test::UploadedFile.new(Rails.root.join('spec/fixtures/mr-bean.png'), 'image/png')
#     }
#   }

#   let(:invalid_attributes) {
#     {
#       caption: "", # Empty caption
#       images: nil   # No image provided
#     }
#   }

#   let!(:user) { create(:user, email: 'new_user@example.com', password: 'password', password_confirmation: 'password') }

#   before(:each) do
#     # Simulate a successful sign-in by setting the user's ID in the session
#     post user_session_path, params: { user: { email: user.email, password: user.password } }
#     follow_redirect! # Follow the redirect after successful sign-in (if applicable)

#     puts 'current_user: ', current_user.inspect
#   end

#   describe "GET /index" do
#     it "renders a successful response" do
#       puts "Before Post.create!"
#       puts "valid_attributes: #{valid_attributes.inspect}"

#       # Make the POST request with multipart form data
#       post posts_url, params: { post: valid_attributes }, headers: { 'Content-Type' => 'multipart/form-data' }

#       # Inspect the response from the POST request
#       puts "Response status code after POST: #{response.status}"
#       puts "Response body after POST: #{response.body}"

#       # Make the GET request
#       puts "Request host before get posts_url: #{request.host}" # Inspect the request host
#       get posts_url

#       # Inspect the response from the GET request
#       puts "Response status code after GET: #{response.status}"
#       puts "Response body after GET: #{response.body}"

#       # Now inspect cookies (after the GET request)
#       puts "Cookies after Post.create! and get posts_url:"
#       response.cookies.each do |name, value|
#         puts "  #{name}: #{value.inspect}"
#       end

#       expect(response).to be_successful
#     end
#   end

#   describe "GET /show" do
#     it "renders a successful response" do
#       post = Post.create! valid_attributes
#       get post_url(post)
#       expect(response).to be_successful
#     end
#   end

#   describe "GET /new" do
#     it "renders a successful response" do
#       get new_post_url
#       expect(response).to be_successful
#     end
#   end

#   describe "GET /edit" do
#     it "renders a successful response" do
#       post = Post.create! valid_attributes
#       get edit_post_url(post)
#       expect(response).to be_successful
#     end
#   end

#   describe "POST /create" do
#     context "with valid parameters" do
#       it "creates a new Post with an image" do
#         expect {
#           post posts_url, params: { post: valid_attributes }
#         }.to change(Post, :count).by(1)
#         expect(Post.last.image).to be_attached
#       end

#       it "redirects to the created post" do
#         post posts_url, params: { post: valid_attributes }
#         expect(response).to redirect_to(post_url(Post.last))
#       end
#     end

#     context "with invalid parameters" do
#       it "does not create a new Post" do
#         expect {
#           post posts_url, params: { post: invalid_attributes }
#         }.to change(Post, :count).by(0)
#       end

#       it "renders a response with 422 status (i.e. to display the 'new' template)" do
#         post posts_url, params: { post: invalid_attributes }
#         expect(response).to have_http_status(:unprocessable_entity)
#       end
#     end
#   end

#   describe "PATCH /update" do
#     context "with valid parameters" do
#       let(:new_attributes) {
#         {
#           caption: "Updated caption",
#           images: Rack::Test::UploadedFile.new(Rails.root.join('spec/fixtures/IMG_4013.jpg'), 'image/jpeg')
#         }
#       }

#       it "updates the requested post with a new image" do
#         post = Post.create! valid_attributes
#         patch post_url(post), params: { post: new_attributes }
#         post.reload
#         expect(post.caption).to eq("Updated caption")
#         expect(post.image).to be_attached
#         expect(post.image.filename).to eq('IMG_4013.jpg') # Check if the image was replaced
#       end

#       it "redirects to the post" do
#         post = Post.create! valid_attributes
#         patch post_url(post), params: { post: new_attributes }
#         post.reload
#         expect(response).to redirect_to(post_url(post))
#       end
#     end

#     context "with invalid parameters" do
#       it "renders a response with 422 status (i.e. to display the 'edit' template)" do
#         post = Post.create! valid_attributes
#         patch post_url(post), params: { post: invalid_attributes }
#         expect(response).to have_http_status(:unprocessable_entity)
#       end
#     end
#   end

#   describe "DELETE /destroy" do
#     it "destroys the requested post" do
#       post = Post.create! valid_attributes
#       expect {
#         delete post_url(post)
#       }.to change(Post, :count).by(-1)
#     end

#     it "redirects to the posts list" do
#       post = Post.create! valid_attributes
#       delete post_url(post)
#       expect(response).to redirect_to(posts_url)
#     end
#   end
# end
